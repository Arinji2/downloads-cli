name: Continuous Integration

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: read

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          echo "Testing on architecture: $GOARCH"
          go test -v -count=1 ./...

  build-validation:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
          - os: macos-latest
            arch: amd64
          - os: windows-latest
            arch: amd64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Build binary
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          echo "Building for OS: ${{ matrix.os }} Architecture: $GOARCH"
          mkdir -p bin
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            GOOS=windows go build -o bin/app.exe
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            GOOS=darwin go build -o bin/app
          else
            GOOS=linux go build -o bin/app
          fi
        shell: bash
        if: runner.os != 'Windows'

      - name: Build binary (Windows)
        run: |
          echo "Building for OS: ${{ matrix.os }} Architecture: ${{ matrix.arch }}"
          mkdir bin
          $env:GOOS="windows"
          go build -o bin/app.exe
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Verify binary
        run: |
          echo "Verifying binary for ${{ matrix.os }} ${{ matrix.arch }}"
          ls -lh bin
        shell: bash
        if: runner.os != 'Windows'

      - name: Verify binary (Windows)
        run: |
          echo "Verifying binary for ${{ matrix.os }} ${{ matrix.arch }}"
          dir bin
        shell: pwsh
        if: runner.os == 'Windows'
